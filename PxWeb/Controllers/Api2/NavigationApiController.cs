/*
 * PxApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Microsoft.AspNetCore.Http;
using PxWeb.Models.Api2;
using PxWeb.Attributes.Api2;
using Px.Abstractions.Interfaces;
using PxWeb.Config.Api2;
using PxWeb.Helper.Api2;
using PCAxis.Menu;
using Link = PxWeb.Models.Api2.Link;
using System.IO;

namespace PxWeb.Controllers.Api2
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NavigationApiController : ControllerBase
    {
        private readonly IDataSource _dataSource;
        private readonly ILanguageHelper _languageHelper;
        
        public NavigationApiController(IDataSource dataSource,ILanguageHelper languageHelper )
        {
            _dataSource = dataSource;
            _languageHelper = languageHelper;
        }

        /// <summary>
        /// Gets navigation item with the given id.
        /// </summary>
        /// <param name="id">Id</param>
        /// <param name="lang">The language if the default is not what you want.</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/v2/navigation/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetNavigationById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Folder), description: "Success")]
        //public virtual IActionResult GetNavigationById([FromRoute][Required] string id, [FromQuery] string lang)
        public virtual IActionResult GetNavigationById([FromRoute(Name = "id")][Required] string id, [FromQuery(Name = "lang")] string? lang)
        {
            bool selectionExists = true;

            lang = _languageHelper.HandleLanguage(lang);

            PxMenuBase menu = _dataSource.CreateMenu(id, lang, out selectionExists);

            if (!selectionExists)
            {
                return new BadRequestObjectResult("No such node id " + id);
            }

            if (menu == null)
            {
                return new BadRequestObjectResult("Error reading data");
            }

            if (menu.CurrentItem == null)
            {
                return new BadRequestObjectResult("Error reading node data");
            }

            Folder folder = GetFolder((PxMenuItem)menu.CurrentItem);

            return new ObjectResult(folder);

        }


        /// <summary>
        /// Browse the database structure
        /// </summary>
        /// <param name="lang">The language if the default is not what you want.</param>
        /// <response code="200">Success</response>
        /// <response code="429">Error respsone for 429</response>
        [HttpGet]
        [Route("/v2/navigation")]
        [ValidateModelState]
        [SwaggerOperation("GetNavigationRoot")]
        [SwaggerResponse(statusCode: 200, type: typeof(Folder), description: "Success")]
        [SwaggerResponse(statusCode: 429, type: typeof(Problem), description: "Error respsone for 429")]
        //public virtual IActionResult GetNavigationRoot([FromQuery] string lang)
        public virtual IActionResult GetNavigationRoot([FromQuery(Name = "lang")] string? lang)
        {
            bool selectionExists = true;

            lang = _languageHelper.HandleLanguage(lang);

            PxMenuBase menu = _dataSource.CreateMenu("", lang, out selectionExists);

            if (menu == null)
            {
                return new BadRequestObjectResult("Error reading data");
            }

            if (menu.CurrentItem == null)
            {
                return new BadRequestObjectResult("Error reading node data");
            }

            Folder folder = GetFolder((PxMenuItem)menu.CurrentItem);

            return new ObjectResult(folder);
        }

        private Folder GetFolder(PxMenuItem currentItem)
        {
            string urlBase = $"{HttpContext.Request.Scheme}://{HttpContext.Request.Host}/v2/";
            Folder folder = new Folder
            {
                Id = currentItem.ID.Selection,
                ObjectType = typeof(Folder).Name,
                Label = currentItem.Text,
                Description = currentItem.Description,
                Tags = null // TODO: Implement later
            };

            folder.Links = new List<Link>();
            Link link = new Link();
            link.Rel = "self";
            link.Href = urlBase + Path.Combine("navigation/", folder.Id);
            folder.Links.Add(link);


            foreach (Item child in currentItem.SubItems)
            {
                if (child is PxMenuItem)
                {
                    FolderInformation fi = new FolderInformation
                    {
                        Id = child.ID.Selection,
                        ObjectType = typeof(FolderInformation).Name,
                        Description = child.Description,
                        Label = child.Text
                    };

                    fi.Links = new List<Link>();
                    Link childLink = new Link();
                    childLink.Rel = "folder";
                    childLink.Href = urlBase + Path.Combine("navigation/", fi.Id);
                    fi.Links.Add(childLink);
                    folder.FolderContents.Add(fi);
                }
                else if (child is TableLink)
                {
                    Table table = new Table
                    {
                        Id = child.ID.Selection,
                        ObjectType = typeof(Table).Name,
                        Description = child.Description,
                        Label = child.Text,
                        Updated = ((TableLink)child).Published,
                        Tags = null, // TODO: Implement later
                        Category = GetCategory(((TableLink)child).Category),
                        FirstPeriod = ((TableLink)child).StartTime,
                        LastPeriod = ((TableLink)child).EndTime
                    };
                    table.Links = new List<Link>();

                    Link childLink = new Link();
                    childLink.Rel = "self";
                    childLink.Href = urlBase + Path.Combine($"tables/{table.Id}");
                    table.Links.Add(childLink);

                    childLink = new Link();
                    childLink.Rel = "metadata";
                    childLink.Href = urlBase + Path.Combine($"tables/{table.Id}/metadata");
                    table.Links.Add(childLink);

                    childLink = new Link();
                    childLink.Rel = "data";
                    childLink.Href = urlBase + Path.Combine($"tables/{table.Id}/data");
                    table.Links.Add(childLink);

                    folder.FolderContents.Add(table);
                }
                else if (child is Headline)
                {
                    Heading heading = new Heading
                    {
                        Id = child.ID.Selection,
                        ObjectType = typeof(Heading).Name,
                        Label = child.Text,
                        Description = child.Description
                    };
                    folder.FolderContents.Add(heading);
                }

            }

            return folder;

        }

        /// <summary>
        /// Translate Menu enum to PxApi enum
        /// </summary>
        /// <param name="category"></param>
        /// <returns></returns>
        private Table.CategoryEnum GetCategory(PresCategory category)
        {
            switch (category)
            {
                case PresCategory.NotSet: //TODO: how shall we handle NotSet?
                    return Table.CategoryEnum.PrivateEnum;
                case PresCategory.Official:
                    return Table.CategoryEnum.OfficialEnum;
                case PresCategory.Internal:
                    return Table.CategoryEnum.InternalEnum;
                case PresCategory.Private:
                    return Table.CategoryEnum.PrivateEnum;
                default:
                    return Table.CategoryEnum.PrivateEnum; //TODO: How shall we handle this?
            }
        }

    }
}
