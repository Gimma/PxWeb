/*
 * PxApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Microsoft.AspNetCore.Http;
using PxWeb.Models.Api2;
using PxWeb.Attributes.Api2;
using Px.Abstractions.Interfaces;
using PxWeb.Config.Api2;
using PxWeb.Helper.Api2;
using PCAxis.Menu;
using Link = PxWeb.Models.Api2.Link;

namespace PxWeb.Controllers.Api2
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NavigationApiController : ControllerBase
    {
        private readonly IDataSource _dataSource;
        private readonly ILanguageHelper _languageHelper;
        
        public NavigationApiController(IDataSource dataSource,ILanguageHelper languageHelper )
        {
            _dataSource = dataSource;
            _languageHelper = languageHelper;
        }

        /// <summary>
        /// Gets navigation item with the given id.
        /// </summary>
        /// <param name="id">Id</param>
        /// <param name="lang">The language if the default is not what you want.</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/v2/navigation/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetNavigationById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Folder), description: "Success")]
        //public virtual IActionResult GetNavigationById([FromRoute][Required] string id, [FromQuery] string lang)
        public virtual IActionResult GetNavigationById([FromRoute(Name = "id")][Required] string id, [FromQuery(Name = "lang")] string? lang)
        {
            bool selectionExists = true;


            string urlBase = $"{HttpContext.Request.Scheme}://{HttpContext.Request.Host}/v2/navigation/";

            lang = _languageHelper.HandleLanguage(lang);

            PxMenuBase menu = _dataSource.CreateMenu(id, lang, out selectionExists);

            if (!selectionExists)
            {
                return new BadRequestObjectResult("No such node id " + id);
            }

            if (menu == null)
            {
                return new BadRequestObjectResult("Error reading data");
            }

            if (menu.CurrentItem == null)
            {
                return new BadRequestObjectResult("Error reading node data");
            }

            PxMenuItem itm = (PxMenuItem)menu.CurrentItem;

            Folder folder = new Folder
            {
                Id = itm.ID.Selection,
                ObjectType = typeof(Folder).Name,
                Label = itm.Text,
                Description = itm.Description,
                Tags = null // TODO: Implement later
            };

            folder.Links = new List<Link>();
            Link link = new Link();
            link.Rel = "self";
            link.Href = urlBase + folder.Id;
            folder.Links.Add(link);


            foreach (Item child in itm.SubItems)
            {
                if (child is PxMenuItem)
                {
                    FolderInformation fi = new FolderInformation
                    {
                        Id = child.ID.Selection,
                        ObjectType = typeof(FolderInformation).Name,
                        Description = child.Description,
                        Label = child.Text
                    };

                    fi.Links = new List<Link>();
                    Link childLink = new Link();
                    childLink.Rel = "folder";
                    childLink.Href = urlBase + fi.Id;
                    fi.Links.Add(childLink);
                    folder.FolderContents.Add(fi);
                }
                else if (child is TableLink)
                {
                    Table table = new Table
                    {
                        Id = child.ID.Selection,
                        ObjectType = typeof(Table).Name,
                        Description = child.Description,
                        Label = child.Text,
                        Updated = ((TableLink)child).Published
                    };
                    folder.FolderContents.Add(table);

                }



                //switch (child.GetType())
                //{
                //    case  typeov PxMenuItem:
                //        FolderInformation fi = new FolderInformation
                //        {
                //            Description = ""
                //        };
                //        folder.FolderContents.Add(fi);
                //        break;
                //    default:
                //        break;
                //}

            }
            
            ////TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            //// return StatusCode(200, default(Folder));
            //string exampleJson = null;
            //exampleJson = "{\n  \"description\" : \"description\",\n  \"folderContents\" : [ {\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"objectType\" : \"objectType\"\n  }, {\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"objectType\" : \"objectType\"\n  } ],\n  \"links\" : [ {\n    \"rel\" : \"rel\",\n    \"href\" : \"href\"\n  }, {\n    \"rel\" : \"rel\",\n    \"href\" : \"href\"\n  } ],\n  \"id\" : \"id\",\n  \"label\" : \"label\",\n  \"objectType\" : \"objectType\",\n  \"tags\" : [ \"tags\", \"tags\" ]\n}";

            //var example = exampleJson != null
            //? JsonConvert.DeserializeObject<Folder>(exampleJson)
            //: default(Folder);            //TODO: Change the data returned
            //return new ObjectResult(example);

            return new ObjectResult(folder);

        }

        /// <summary>
        /// Browse the database structure
        /// </summary>
        /// <param name="lang">The language if the default is not what you want.</param>
        /// <response code="200">Success</response>
        /// <response code="429">Error respsone for 429</response>
        [HttpGet]
        [Route("/v2/navigation")]
        [ValidateModelState]
        [SwaggerOperation("GetNavigationRoot")]
        [SwaggerResponse(statusCode: 200, type: typeof(Folder), description: "Success")]
        [SwaggerResponse(statusCode: 429, type: typeof(Problem), description: "Error respsone for 429")]
        //public virtual IActionResult GetNavigationRoot([FromQuery] string lang)
        public virtual IActionResult GetNavigationRoot([FromQuery(Name = "lang")] string? lang)
        {
            bool selectionExists;

            lang = _languageHelper.HandleLanguage(lang);

            _dataSource.CreateMenu("", lang, out selectionExists);
            
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Folder));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(Problem));
            string exampleJson = null;
            exampleJson = "{\n  \"description\" : \"description\",\n  \"folderContents\" : [ {\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"objectType\" : \"objectType\"\n  }, {\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"objectType\" : \"objectType\"\n  } ],\n  \"links\" : [ {\n    \"rel\" : \"rel\",\n    \"href\" : \"href\"\n  }, {\n    \"rel\" : \"rel\",\n    \"href\" : \"href\"\n  } ],\n  \"id\" : \"id\",\n  \"label\" : \"label\",\n  \"objectType\" : \"objectType\",\n  \"tags\" : [ \"tags\", \"tags\" ]\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Folder>(exampleJson)
            : default(Folder);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
