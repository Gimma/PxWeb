/*
 * PxApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using PxWeb.Converters;

namespace PxWeb.Models.Api2
{

    // TODO: Wrong parent from yaml
    //    public partial class Table : IEquatable<Table>
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Table : FolderContentItem
    {
        //TODO: Generated wrong from yaml
        ///// <summary>
        ///// Gets or Sets Id
        ///// </summary>
        //[DataMember(Name="id", EmitDefaultValue=true)]
        //public string? Id { get; set; }

        ///// <summary>
        ///// One of heading, table, folder or folder-information
        ///// </summary>
        ///// <value>One of heading, table, folder or folder-information</value>
        //[DataMember(Name="objectType", EmitDefaultValue=false)]
        //public string ObjectType { get; set; }

        ///// <summary>
        ///// Display text
        ///// </summary>
        ///// <value>Display text</value>
        //[DataMember(Name="label", EmitDefaultValue=true)]
        //public string? Label { get; set; }

        ///// <summary>
        ///// Longer text describing node. If no longer text exist, same as label
        ///// </summary>
        ///// <value>Longer text describing node. If no longer text exist, same as label</value>
        //[DataMember(Name="description", EmitDefaultValue=true)]
        //public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// For treeNodeType \&quot;table\&quot;
        /// </summary>
        /// <value>For treeNodeType \&quot;table\&quot;</value>
        [DataMember(Name="updated", EmitDefaultValue=true)]
        public DateTime? Updated { get; set; }


        /// <summary>
        /// Mostly for internal use. Which category table belongs to. internal, official, private or section. I, O, P, S
        /// </summary>
        /// <value>Mostly for internal use. Which category table belongs to. internal, official, private or section. I, O, P, S</value>
        [TypeConverter(typeof(CustomEnumConverter<CategoryEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum InternalEnum for internal
            /// </summary>
            [EnumMember(Value = "internal")]
            InternalEnum = 1,
            
            /// <summary>
            /// Enum OfficialEnum for official
            /// </summary>
            [EnumMember(Value = "official")]
            OfficialEnum = 2,
            
            /// <summary>
            /// Enum PrivateEnum for private
            /// </summary>
            [EnumMember(Value = "private")]
            PrivateEnum = 3,
            
            /// <summary>
            /// Enum SectionEnum for section
            /// </summary>
            [EnumMember(Value = "section")]
            SectionEnum = 4
        }

        /// <summary>
        /// Mostly for internal use. Which category table belongs to. internal, official, private or section. I, O, P, S
        /// </summary>
        /// <value>Mostly for internal use. Which category table belongs to. internal, official, private or section. I, O, P, S</value>
        [DataMember(Name="category", EmitDefaultValue=true)]
        public CategoryEnum Category { get; set; } = CategoryEnum.OfficialEnum;

        /// <summary>
        /// Links to ...
        /// </summary>
        /// <value>Links to ...</value>
        [DataMember(Name="links", EmitDefaultValue=true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// List of varibles name
        /// </summary>
        /// <value>List of varibles name</value>
        [DataMember(Name="variablesName", EmitDefaultValue=false)]
        public List<string> VariablesName { get; set; }

        /// <summary>
        /// First period
        /// </summary>
        /// <value>First period</value>
        [DataMember(Name="firstPeriod", EmitDefaultValue=false)]
        public string FirstPeriod { get; set; }

        /// <summary>
        /// Last period
        /// </summary>
        /// <value>Last period</value>
        [DataMember(Name="lastPeriod", EmitDefaultValue=false)]
        public string LastPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Discontinued
        /// </summary>
        [DataMember(Name="discontinued", EmitDefaultValue=true)]
        public bool Discontinued { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Table {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  VariablesName: ").Append(VariablesName).Append("\n");
            sb.Append("  FirstPeriod: ").Append(FirstPeriod).Append("\n");
            sb.Append("  LastPeriod: ").Append(LastPeriod).Append("\n");
            sb.Append("  Discontinued: ").Append(Discontinued).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Table)obj);
        }

        /// <summary>
        /// Returns true if Table instances are equal
        /// </summary>
        /// <param name="other">Instance of Table to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Table other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ObjectType == other.ObjectType ||
                    ObjectType != null &&
                    ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    Category == other.Category ||
                    
                    Category.Equals(other.Category)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    other.Links != null &&
                    Links.SequenceEqual(other.Links)
                ) && 
                (
                    VariablesName == other.VariablesName ||
                    VariablesName != null &&
                    other.VariablesName != null &&
                    VariablesName.SequenceEqual(other.VariablesName)
                ) && 
                (
                    FirstPeriod == other.FirstPeriod ||
                    FirstPeriod != null &&
                    FirstPeriod.Equals(other.FirstPeriod)
                ) && 
                (
                    LastPeriod == other.LastPeriod ||
                    LastPeriod != null &&
                    LastPeriod.Equals(other.LastPeriod)
                ) && 
                (
                    Discontinued == other.Discontinued ||
                    
                    Discontinued.Equals(other.Discontinued)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ObjectType != null)
                    hashCode = hashCode * 59 + ObjectType.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (VariablesName != null)
                    hashCode = hashCode * 59 + VariablesName.GetHashCode();
                    if (FirstPeriod != null)
                    hashCode = hashCode * 59 + FirstPeriod.GetHashCode();
                    if (LastPeriod != null)
                    hashCode = hashCode * 59 + LastPeriod.GetHashCode();
                    
                    hashCode = hashCode * 59 + Discontinued.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Table left, Table right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Table left, Table right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
