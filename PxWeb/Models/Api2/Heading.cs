/*
 * PxApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Runtime.Serialization;
using System.Text;

namespace PxWeb.Models.Api2
{
    //TODO: Wrong parent generated by yaml
    //public partial class Heading : IEquatable<Heading>

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Heading : FolderContentItem
    {
        //TODO: generated wrong from yaml
        
        ///// <summary>
        ///// Gets or Sets Id
        ///// </summary>
        //[DataMember(Name="id", EmitDefaultValue=true)]
        //public string? Id { get; set; }

        ///// <summary>
        ///// One of heading, table, folder or folder-information
        ///// </summary>
        ///// <value>One of heading, table, folder or folder-information</value>
        //[DataMember(Name="objectType", EmitDefaultValue=false)]
        //public string ObjectType { get; set; }

        ///// <summary>
        ///// Display text
        ///// </summary>
        ///// <value>Display text</value>
        //[DataMember(Name="label", EmitDefaultValue=true)]
        //public string? Label { get; set; }

        ///// <summary>
        ///// Longer text describing node. If no longer text exist, same as label
        ///// </summary>
        ///// <value>Longer text describing node. If no longer text exist, same as label</value>
        //[DataMember(Name="description", EmitDefaultValue=true)]
        //public string? Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Heading {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Heading)obj);
        }

        /// <summary>
        /// Returns true if Heading instances are equal
        /// </summary>
        /// <param name="other">Instance of Heading to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Heading other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ObjectType == other.ObjectType ||
                    ObjectType != null &&
                    ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ObjectType != null)
                    hashCode = hashCode * 59 + ObjectType.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Heading left, Heading right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Heading left, Heading right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
